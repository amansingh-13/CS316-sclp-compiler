         A Description of the Resources and Expected Deliverables of Assignment A2
         ========================================================================


A. Resources
------------

This directory contains the following :

 1. This file (A2-README).

 2. A subdirectory called A2-reference-implementations. It contains the following files
    
    - A2-sclp. This is the reference implementation for assignment A2. You submission 
      should match the behaviour of this implementation (barring perhaps the -help option).

      If you have any questions about the specifications, create suitable examples and 
      run this implementation to discover the finer points.

    - Reference implementations L1-sclp, L2-sclp, L3-sclp. These are reference implementations 
      of the full compiler for language levels 1, 2, and 3. You can observe the AST, TAC, RTL, 
      ASM for your input programs by giving appropriate command line switches.

 3. A subdirectory called A2-example-programs. It contains the following subdirectory

     - Level-3-test-cases. This subdirectory contains some valid programs for level 3 of 
       the language.

B. Expected Deliverables
-------------------------

As explained in the class and the sclp web page, this assignment requires you to generate AST for
Level 3 of the language. A description of the level can be found on the sclp web page.

You need to submit a tarred gzipped version of your directory (file name must be <group_id>.tar.gz). 
On untarring, it must produce the director `group_id' (e.g. `group1', `group19'). The directory
must contain a `Makefile' that produces an executable called `sclp' (and not `A2-sclp', `L1-sclp',
`L2-sclp', nor L3-sclp). The Makefile must also have a target `clean' such that the command `make 
clean' deletes all generated files in the same directory (including those generated by compiling 
sclp, those generated by sclp on any input program and the *.log files below). Any deviation from 
this will be treated as non-submission. 

You are required to use C++ code in your implementation.

Your submission will be evaluated on the following factors:

 1. A set of test cases. 

    Some of these will be valid programs whereas some will be invalid programs. The commands used 
    will be

    $ ./sclp valid_test.c

    This should produce no output and should finish silently and exit with return value 0. Thus the 
    sequence of commands
    
    $ ./sclp valid_test.c
    $ echo $?

    should print the number 0.

    In other words, the program valid_test.c should be accepted and properly parsed by your implementation. 
    Please do not print any thing in the output, not even something to the effect "Program Accepted" 
    or "Hurray!!" :)

    $ ./sclp invalid_test.c

    This must print an error message or stderr (or cerr) and exit with a non-zero return value. In 
    other words, the program invalid_test.c should be rejected by your implementation. The output 
    redirection to a file with the command

    $ ./sclp invalid_test.c >| out.log
 
    should still print the error message on the screen. Command `echo $?' after it should print a 
    non-zero number.

    The only way to silence the screen output should be to use the command

    % ./sclp invalid_test.c 2>| err.log

    Again, the command `echo $?' after it should print a non-zero number.

    An important point is that if you write an error function (such as yyerror) that handles an error,
    then the function must exit with a non-zero value. If we find a function that returns instead of
    exiting or exits with value zero, then the submission will be considered invalid.

    The text of the error message that goes in err.log does not matter and it need not match that of 
    the reference implementation.


    The golden rule is that when you are in doubt, post on moodle discussion forum, the following 
    things: the name of the test case (or the smallest version of your program that exhibits the 
    behavior), the response of A2-sclp, the response of L1-sclp, the response of L2-sclp, and the
    response of L3-sclp.

 2. The following options will be checked: -tokens, -ast, -sa-scan, -sa-parse. The options and the 
    input file name may appear in any order.
    
    The token codes in the token file may not match those produced 
    by the reference implementation. We will remove them and match the output using the command
    `diff -Bw'. Thus everything else must match the output of the reference implementation exactly.


 3. Absence of shift-reduce or reduce-reduce conflicts in the parser.

    Use the command `yacc -dv' in your Makefile to produce the y.tab.h and y.output files (do not
    rename them). The command

    $ make

    should not report any shift-reduce or reduce-reduce conflicts. Similarly no conflicts should 
    appear in the y.output file.
