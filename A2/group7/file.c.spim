


	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:                # .globl makes main know to the outside of the program.
# Prologue begins
	sw $ra, 0($sp)      # Save the return address
	sw $fp, -4($sp)     # Save the frame pointer
	sub $fp, $sp, 4     # Update the frame pointer
	sub $sp, $sp, 20    # Make space for the locals
# Prologue ends

	lw $v0, -8($fp)     # Source:b_
	sw $v0, -4($fp)     # Dest: $v0
	li $v0, 5           # Loading 5 in v0 to indicate syscall to read integter value
	syscall
	sw $v0, -4($fp)     # Moving the read value from register v0
Label0:
	lw $v0, -12($fp)    # Source:x_
	xori $t0, $v0, 1    # Result: $t0, Opd1: $v0
	bgtz $t0, Label1
	li $v0, 5           # Loading 5 in v0 to indicate syscall to read integter value
	syscall
	sw $v0, -8($fp)     # Moving the read value from register v0
	li $v0, 1           # Loading 1 in v0 to indicate syscall to print integter value
	lw $a0, -4($fp)     # Moving the value to be printed into register a0
	syscall
	j Label0
Label1:
epilogue_main:
	add $sp, $sp, 20    # Increment stack pointer for local variables
	lw $fp, -4($sp)     # Set $fp to $sp-4
	lw $ra, 0($sp)      # Save ra
	jr $ra              # Jump back to the called procedure
# Epilogue Ends

